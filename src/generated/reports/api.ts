/* tslint:disable */
/* eslint-disable */
/**
 * Offline Report
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AsyncReport
 */
export interface AsyncReport {
    /**
     * The identifier of the requested report.
     * @type {string}
     * @memberof AsyncReport
     */
    'reportId': string;
    /**
     * The end date for the reporting period in YYYY-mm-dd format.
     * @type {string}
     * @memberof AsyncReport
     */
    'endDate': string;
    /**
     * 
     * @type {AsyncReportConfiguration}
     * @memberof AsyncReport
     */
    'configuration': AsyncReportConfiguration;
    /**
     * The date at which the download URL for the generated report expires. urlExpires at this time defaults to 3600 seconds but may vary in the future.
     * @type {string}
     * @memberof AsyncReport
     */
    'urlExpiresAt'?: string | null;
    /**
     * URL of the generated report.
     * @type {string}
     * @memberof AsyncReport
     */
    'url'?: string | null;
    /**
     * The date at which the report was created in ISO 8601 date time format.
     * @type {string}
     * @memberof AsyncReport
     */
    'createdAt': string;
    /**
     * The size of the report file, in bytes.
     * @type {number}
     * @memberof AsyncReport
     */
    'fileSize'?: number | null;
    /**
     * Present for failed reports only. The reason why a report failed to generate.
     * @type {string}
     * @memberof AsyncReport
     */
    'failureReason'?: string | null;
    /**
     * Optional. The name of the generated report.
     * @type {string}
     * @memberof AsyncReport
     */
    'name'?: string | null;
    /**
     * The date at which the report was generated in ISO 8601 date time format.
     * @type {string}
     * @memberof AsyncReport
     */
    'generatedAt'?: string | null;
    /**
     * The start date for the reporting period in YYYY-mm-dd format.
     * @type {string}
     * @memberof AsyncReport
     */
    'startDate': string;
    /**
     * The build status of the report.   - `PENDING` - Report is created and awaiting processing.   - `PROCESSING` - Report is processing. Please wait.   - `COMPLETED` - Report has completed.  Check the `url` for the output file.   - `FAILED` - Report generation failed.  Check the `failureReason` for details. 
     * @type {string}
     * @memberof AsyncReport
     */
    'status': AsyncReportStatusEnum;
    /**
     * The date at which the report was last updated in ISO 8601 date time format.
     * @type {string}
     * @memberof AsyncReport
     */
    'updatedAt': string;
}

export const AsyncReportStatusEnum = {
    Pending: 'PENDING',
    Processing: 'PROCESSING',
    Completed: 'COMPLETED',
    Failed: 'FAILED'
} as const;

export type AsyncReportStatusEnum = typeof AsyncReportStatusEnum[keyof typeof AsyncReportStatusEnum];

/**
 * The advertising product.
 * @export
 * @enum {string}
 */

export const AsyncReportAdProduct = {
    SponsoredProducts: 'SPONSORED_PRODUCTS',
    SponsoredBrands: 'SPONSORED_BRANDS',
    SponsoredDisplay: 'SPONSORED_DISPLAY',
    SponsoredTelevision: 'SPONSORED_TELEVISION',
    DemandSidePlatform: 'DEMAND_SIDE_PLATFORM',
    All: 'ALL'
} as const;

export type AsyncReportAdProduct = typeof AsyncReportAdProduct[keyof typeof AsyncReportAdProduct];


/**
 * 
 * @export
 * @interface AsyncReportConfiguration
 */
export interface AsyncReportConfiguration {
    /**
     * 
     * @type {AsyncReportAdProduct}
     * @memberof AsyncReportConfiguration
     */
    'adProduct': AsyncReportAdProduct;
    /**
     * The list of columns to be used for report. The availability of columns depends on the selection of reportTypeId. This list cannot be null or empty. 
     * @type {Array<string>}
     * @memberof AsyncReportConfiguration
     */
    'columns': Array<string>;
    /**
     * The identifier of the Report Type to be generated.
     * @type {string}
     * @memberof AsyncReportConfiguration
     */
    'reportTypeId': string;
    /**
     * The report file format.
     * @type {string}
     * @memberof AsyncReportConfiguration
     */
    'format': AsyncReportConfigurationFormatEnum;
    /**
     * This field determines the aggregation level of the report data and also makes additional fields available for selection. This field cannot be null or empty. 
     * @type {Array<string>}
     * @memberof AsyncReportConfiguration
     */
    'groupBy': Array<string>;
    /**
     * The list of filters supported by a report type. The availability of filters fields depends on the selection of reportTypeId.
     * @type {Array<AsyncReportFilter>}
     * @memberof AsyncReportConfiguration
     */
    'filters'?: Array<AsyncReportFilter> | null;
    /**
     * The aggregation level of report data. If the timeUnit is set to `SUMMARY`, the report data is aggregated at the time period specified. The availability of time unit breakdowns depends on the selection of reportTypeId. 
     * @type {string}
     * @memberof AsyncReportConfiguration
     */
    'timeUnit': AsyncReportConfigurationTimeUnitEnum;
}

export const AsyncReportConfigurationFormatEnum = {
    GzipJson: 'GZIP_JSON'
} as const;

export type AsyncReportConfigurationFormatEnum = typeof AsyncReportConfigurationFormatEnum[keyof typeof AsyncReportConfigurationFormatEnum];
export const AsyncReportConfigurationTimeUnitEnum = {
    Summary: 'SUMMARY',
    Daily: 'DAILY'
} as const;

export type AsyncReportConfigurationTimeUnitEnum = typeof AsyncReportConfigurationTimeUnitEnum[keyof typeof AsyncReportConfigurationTimeUnitEnum];

/**
 * 
 * @export
 * @interface AsyncReportFilter
 */
export interface AsyncReportFilter {
    /**
     * The field name of the filter
     * @type {string}
     * @memberof AsyncReportFilter
     */
    'field'?: string;
    /**
     * The values to be filtered by
     * @type {Array<string>}
     * @memberof AsyncReportFilter
     */
    'values'?: Array<string>;
}
/**
 * The Error Response.
 * @export
 * @interface AsyncReportingError
 */
export interface AsyncReportingError {
    /**
     * The HTTP status code of the response.
     * @type {string}
     * @memberof AsyncReportingError
     */
    'code'?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof AsyncReportingError
     */
    'detail'?: string;
}
/**
 * 
 * @export
 * @interface CreateAsyncReportRequest
 */
export interface CreateAsyncReportRequest {
    /**
     * YYYY-MM-DD format. The maximum lookback window supported depends on the selection of reportTypeId. Most report types support `95 days` as lookback window.
     * @type {string}
     * @memberof CreateAsyncReportRequest
     */
    'endDate': string;
    /**
     * 
     * @type {AsyncReportConfiguration}
     * @memberof CreateAsyncReportRequest
     */
    'configuration': AsyncReportConfiguration;
    /**
     * The name of the report.
     * @type {string}
     * @memberof CreateAsyncReportRequest
     */
    'name'?: string;
    /**
     * YYYY-MM-DD format. The maximum lookback window supported depends on the selection of reportTypeId. Most report types support `95 days` as lookback window.
     * @type {string}
     * @memberof CreateAsyncReportRequest
     */
    'startDate': string;
}
/**
 * 
 * @export
 * @interface DeleteAsyncReportResponse
 */
export interface DeleteAsyncReportResponse {
    /**
     * The HTTP status code of the response.
     * @type {string}
     * @memberof DeleteAsyncReportResponse
     */
    'code'?: string;
    /**
     * The identifier of the report.
     * @type {string}
     * @memberof DeleteAsyncReportResponse
     */
    'reportId'?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof DeleteAsyncReportResponse
     */
    'detail'?: string;
}

/**
 * AsynchronousReportsApi - axios parameter creator
 * @export
 */
export const AsynchronousReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a report request. Use this operation to request the creation of a new report for Amazon Advertising Products. Use `adProduct` to specify the Advertising Product of the report.
         * @summary Creates a report request
         * @param {string} amazonAdvertisingAPIClientId The client identifier of the customer making the request.
         * @param {string} [amazonAdvertisingAPIScope] The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} [amazonAdsAccountId] The identifier of a DSP advertiser account. Optional. For details, see [this guide](guides/reporting/dsp/creating-reports).
         * @param {CreateAsyncReportRequest} [createAsyncReportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAsyncReport: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope?: string, amazonAdsAccountId?: string, createAsyncReportRequest?: CreateAsyncReportRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createAsyncReport', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            const localVarPath = `/reporting/reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.createasyncreportrequest.v3+json';

            if (amazonAdvertisingAPIClientId != null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }
            if (amazonAdvertisingAPIScope != null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }
            if (amazonAdsAccountId != null) {
                localVarHeaderParameter['Amazon-Ads-AccountId'] = String(amazonAdsAccountId);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAsyncReportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a report by id. Use this operation to cancel a report in a `PENDING` status.
         * @summary Deletes a report by id
         * @param {string} reportId The identifier of the requested report.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} [amazonAdvertisingAPIScope] The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} [amazonAdsAccountId] The identifier of a DSP advertiser account. Optional. For details, see [this guide](guides/reporting/dsp/creating-reports).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAsyncReport: async (reportId: string, amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope?: string, amazonAdsAccountId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('deleteAsyncReport', 'reportId', reportId)
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('deleteAsyncReport', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            const localVarPath = `/reporting/reports/{reportId}`
                .replace(`{${"reportId"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (amazonAdvertisingAPIClientId != null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }
            if (amazonAdvertisingAPIScope != null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }
            if (amazonAdsAccountId != null) {
                localVarHeaderParameter['Amazon-Ads-AccountId'] = String(amazonAdsAccountId);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a generation status of a report by id. Uses the `reportId` value from the response of previously requested report via `POST /reporting/reports` operation. When `status` is set to `COMPLETED`, the report will be available to be downloaded at `url`.  Report generation can take as long as 3 hours. Repeated calls to check report status may generate a 429 response, indicating that your requests have been throttled. To retrieve reports programmatically, your application logic should institute a delay between requests. For more information, see [Retry logic with exponential backoff](concepts/rate-limiting#use-retry-logic-with-exponential-backoff). 
         * @summary Gets a generation status of report by id
         * @param {string} reportId The identifier of the requested report.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} [amazonAdvertisingAPIScope] The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} [amazonAdsAccountId] The identifier of a DSP advertiser account. Optional. For details, see [this guide](guides/reporting/dsp/creating-reports).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAsyncReport: async (reportId: string, amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope?: string, amazonAdsAccountId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('getAsyncReport', 'reportId', reportId)
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getAsyncReport', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            const localVarPath = `/reporting/reports/{reportId}`
                .replace(`{${"reportId"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (amazonAdvertisingAPIClientId != null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }
            if (amazonAdvertisingAPIScope != null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }
            if (amazonAdsAccountId != null) {
                localVarHeaderParameter['Amazon-Ads-AccountId'] = String(amazonAdsAccountId);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AsynchronousReportsApi - functional programming interface
 * @export
 */
export const AsynchronousReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AsynchronousReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a report request. Use this operation to request the creation of a new report for Amazon Advertising Products. Use `adProduct` to specify the Advertising Product of the report.
         * @summary Creates a report request
         * @param {string} amazonAdvertisingAPIClientId The client identifier of the customer making the request.
         * @param {string} [amazonAdvertisingAPIScope] The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} [amazonAdsAccountId] The identifier of a DSP advertiser account. Optional. For details, see [this guide](guides/reporting/dsp/creating-reports).
         * @param {CreateAsyncReportRequest} [createAsyncReportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAsyncReport(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope?: string, amazonAdsAccountId?: string, createAsyncReportRequest?: CreateAsyncReportRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AsyncReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAsyncReport(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, amazonAdsAccountId, createAsyncReportRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AsynchronousReportsApi.createAsyncReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes a report by id. Use this operation to cancel a report in a `PENDING` status.
         * @summary Deletes a report by id
         * @param {string} reportId The identifier of the requested report.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} [amazonAdvertisingAPIScope] The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} [amazonAdsAccountId] The identifier of a DSP advertiser account. Optional. For details, see [this guide](guides/reporting/dsp/creating-reports).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAsyncReport(reportId: string, amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope?: string, amazonAdsAccountId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAsyncReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAsyncReport(reportId, amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, amazonAdsAccountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AsynchronousReportsApi.deleteAsyncReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets a generation status of a report by id. Uses the `reportId` value from the response of previously requested report via `POST /reporting/reports` operation. When `status` is set to `COMPLETED`, the report will be available to be downloaded at `url`.  Report generation can take as long as 3 hours. Repeated calls to check report status may generate a 429 response, indicating that your requests have been throttled. To retrieve reports programmatically, your application logic should institute a delay between requests. For more information, see [Retry logic with exponential backoff](concepts/rate-limiting#use-retry-logic-with-exponential-backoff). 
         * @summary Gets a generation status of report by id
         * @param {string} reportId The identifier of the requested report.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} [amazonAdvertisingAPIScope] The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} [amazonAdsAccountId] The identifier of a DSP advertiser account. Optional. For details, see [this guide](guides/reporting/dsp/creating-reports).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAsyncReport(reportId: string, amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope?: string, amazonAdsAccountId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AsyncReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAsyncReport(reportId, amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, amazonAdsAccountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AsynchronousReportsApi.getAsyncReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AsynchronousReportsApi - factory interface
 * @export
 */
export const AsynchronousReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AsynchronousReportsApiFp(configuration)
    return {
        /**
         * Creates a report request. Use this operation to request the creation of a new report for Amazon Advertising Products. Use `adProduct` to specify the Advertising Product of the report.
         * @summary Creates a report request
         * @param {string} amazonAdvertisingAPIClientId The client identifier of the customer making the request.
         * @param {string} [amazonAdvertisingAPIScope] The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} [amazonAdsAccountId] The identifier of a DSP advertiser account. Optional. For details, see [this guide](guides/reporting/dsp/creating-reports).
         * @param {CreateAsyncReportRequest} [createAsyncReportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAsyncReport(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope?: string, amazonAdsAccountId?: string, createAsyncReportRequest?: CreateAsyncReportRequest, options?: RawAxiosRequestConfig): AxiosPromise<AsyncReport> {
            return localVarFp.createAsyncReport(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, amazonAdsAccountId, createAsyncReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a report by id. Use this operation to cancel a report in a `PENDING` status.
         * @summary Deletes a report by id
         * @param {string} reportId The identifier of the requested report.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} [amazonAdvertisingAPIScope] The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} [amazonAdsAccountId] The identifier of a DSP advertiser account. Optional. For details, see [this guide](guides/reporting/dsp/creating-reports).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAsyncReport(reportId: string, amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope?: string, amazonAdsAccountId?: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteAsyncReportResponse> {
            return localVarFp.deleteAsyncReport(reportId, amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, amazonAdsAccountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a generation status of a report by id. Uses the `reportId` value from the response of previously requested report via `POST /reporting/reports` operation. When `status` is set to `COMPLETED`, the report will be available to be downloaded at `url`.  Report generation can take as long as 3 hours. Repeated calls to check report status may generate a 429 response, indicating that your requests have been throttled. To retrieve reports programmatically, your application logic should institute a delay between requests. For more information, see [Retry logic with exponential backoff](concepts/rate-limiting#use-retry-logic-with-exponential-backoff). 
         * @summary Gets a generation status of report by id
         * @param {string} reportId The identifier of the requested report.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} [amazonAdvertisingAPIScope] The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} [amazonAdsAccountId] The identifier of a DSP advertiser account. Optional. For details, see [this guide](guides/reporting/dsp/creating-reports).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAsyncReport(reportId: string, amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope?: string, amazonAdsAccountId?: string, options?: RawAxiosRequestConfig): AxiosPromise<AsyncReport> {
            return localVarFp.getAsyncReport(reportId, amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, amazonAdsAccountId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AsynchronousReportsApi - object-oriented interface
 * @export
 * @class AsynchronousReportsApi
 * @extends {BaseAPI}
 */
export class AsynchronousReportsApi extends BaseAPI {
    /**
     * Creates a report request. Use this operation to request the creation of a new report for Amazon Advertising Products. Use `adProduct` to specify the Advertising Product of the report.
     * @summary Creates a report request
     * @param {string} amazonAdvertisingAPIClientId The client identifier of the customer making the request.
     * @param {string} [amazonAdvertisingAPIScope] The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @param {string} [amazonAdsAccountId] The identifier of a DSP advertiser account. Optional. For details, see [this guide](guides/reporting/dsp/creating-reports).
     * @param {CreateAsyncReportRequest} [createAsyncReportRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AsynchronousReportsApi
     */
    public createAsyncReport(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope?: string, amazonAdsAccountId?: string, createAsyncReportRequest?: CreateAsyncReportRequest, options?: RawAxiosRequestConfig) {
        return AsynchronousReportsApiFp(this.configuration).createAsyncReport(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, amazonAdsAccountId, createAsyncReportRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a report by id. Use this operation to cancel a report in a `PENDING` status.
     * @summary Deletes a report by id
     * @param {string} reportId The identifier of the requested report.
     * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @param {string} [amazonAdvertisingAPIScope] The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @param {string} [amazonAdsAccountId] The identifier of a DSP advertiser account. Optional. For details, see [this guide](guides/reporting/dsp/creating-reports).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AsynchronousReportsApi
     */
    public deleteAsyncReport(reportId: string, amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope?: string, amazonAdsAccountId?: string, options?: RawAxiosRequestConfig) {
        return AsynchronousReportsApiFp(this.configuration).deleteAsyncReport(reportId, amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, amazonAdsAccountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a generation status of a report by id. Uses the `reportId` value from the response of previously requested report via `POST /reporting/reports` operation. When `status` is set to `COMPLETED`, the report will be available to be downloaded at `url`.  Report generation can take as long as 3 hours. Repeated calls to check report status may generate a 429 response, indicating that your requests have been throttled. To retrieve reports programmatically, your application logic should institute a delay between requests. For more information, see [Retry logic with exponential backoff](concepts/rate-limiting#use-retry-logic-with-exponential-backoff). 
     * @summary Gets a generation status of report by id
     * @param {string} reportId The identifier of the requested report.
     * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @param {string} [amazonAdvertisingAPIScope] The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @param {string} [amazonAdsAccountId] The identifier of a DSP advertiser account. Optional. For details, see [this guide](guides/reporting/dsp/creating-reports).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AsynchronousReportsApi
     */
    public getAsyncReport(reportId: string, amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope?: string, amazonAdsAccountId?: string, options?: RawAxiosRequestConfig) {
        return AsynchronousReportsApiFp(this.configuration).getAsyncReport(reportId, amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, amazonAdsAccountId, options).then((request) => request(this.axios, this.basePath));
    }
}



